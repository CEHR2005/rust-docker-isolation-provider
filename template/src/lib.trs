#![allow(incomplete_features, unused_macros)]
#![feature(specialization, async_closure)]

use wasm_bindgen::prelude::*;

mod __respond {
    use serde::{Serialize, Serializer};

    #[derive(Serialize)]
    pub struct Infallible {}

    #[derive(Serialize)]
    #[serde(rename_all = "lowercase")]
    enum Respond<T, E> {
        Resolved(T),
        Rejected(E),
    }

    pub trait Responder {
        fn respond_to<S: Serializer>(self, serializer: S) -> Option<S::Error>;
        // where (on believe)
        //     S: Serializer<Ok = ()>;
    }

    impl<T: Serialize> Responder for T {
        default fn respond_to<S: Serializer>(self, serializer: S) -> Option<S::Error> {
            Respond::<_, Infallible>::Resolved(self).serialize(serializer).err()
        }
    }

    impl<T: Serialize, E: Serialize> Responder for Result<T, E> {
        fn respond_to<S: Serializer>(self, serializer: S) -> Option<S::Error> {
            match self {
                Ok(ok) => Respond::Resolved(ok),
                Err(err) => Respond::Rejected(err),
            }
            .serialize(serializer)
            .err()
        }
    }
}

macro_rules! __std_error {
    () => {
        compile_error!(
            "print to `std{err, out}` forbidden in `wasm32-unknown-unknown`, \
             Instead it return any impl `Serialize` from `main`."
        );
    };
}

macro_rules! print {
    ($($tt:tt)*) => {{
        __std_error!();
        if false {
            std::print!($($tt)*);
        }
    }};
}

macro_rules! println {
    ($($tt:tt)*) => {{
        __std_error!();
        if false {
            std::println!($($tt)*);
        }
    }};
}

macro_rules! eprint {
    ($($tt:tt)*) => {{
        __std_error!();
        if false {
            std::print!($($tt)*);
        }
    }};
}

macro_rules! eprintln {
    ($($tt:tt)*) => {{
        __std_error!();
        if false {
            std::println!($($tt)*);
        }
    }};
}

macro_rules! js {
  (|$($args:ident),* $(,)?| $($block:tt)* ) => {{
    async move {
      let x = { __embed_js::js_impl! { $($args),* => $($block)* }}.await;
      x
    }
  }};
  ($(||)? $($block:tt)* ) => {{
    async move {
      let x = { __embed_js::js_impl! { => $($block)* }}.await;
      x
    }
  }};
}

mod __convert {
    use {
        std::fmt::Debug,
        wasm_bindgen::prelude::{
            soft::{FromJs, IntoJs},
            JsValue,
        },
    };

    pub trait __FromJsMacro: Sized {
        fn __from(js: JsValue) -> Self;
    }

    impl<T: FromJs> __FromJsMacro for T
    where
        <T as FromJs>::Err: Debug,
    {
        fn __from(js: JsValue) -> Self {
            FromJs::from(js).unwrap()
        }
    }

    pub trait __IntoJsMacro: Sized {
        fn __into(self) -> JsValue;
    }

    impl<T: IntoJs> __IntoJsMacro for T
    where
        <T as IntoJs>::Err: Debug,
    {
        fn __into(self) -> JsValue {
            IntoJs::into(self).unwrap()
        }
    }
}

pub use __convert::{__FromJsMacro, __IntoJsMacro};

async fn deep_impl(token: String) -> JsValue {
    js!(|token| {
        const {generateApolloClient} = await import("@deep-foundation/hasura/client.js");
        const {DeepClient, parseJwt} = await import("@deep-foundation/deeplinks/imports/client.js");

        const GQL_URN = process.env.GQL_URN || "localhost:3006/gql";
        const GQL_SSL = process.env.GQL_SSL || 0;


        if (!token) throw new Error("No token provided");
        const decoded = parseJwt(token);
        const linkId = decoded?.userId;
        const apolloClient = generateApolloClient({
          path: GQL_URN,
          ssl: !!+GQL_SSL,
          token,
        });
        const deepClient = new DeepClient({ apolloClient, linkId, token });
        deepClient.import = async (path) => {
            return module = await import(path)
        };
        return deepClient;
    })
    .await
}

pub async fn deep(token: Option<String>) -> Option<JsValue> {
    if let Some(token) = token { Some(deep_impl(token).await) } else { None }
}

pub struct Ctx<T = serde_json::Value> {
    pub data: T,
    pub deep: Option<JsValue>,
}

macro_rules! __entry {
    (async |$ident:ident| $($tail:tt)*) => { async move |$ident: Ctx| $($tail)* };
    (async $($tail:tt)*) => { async move $($tail)* };
}

macro_rules! __main_attr {
    (for { $ser:expr }
     where { $($params:expr),* }

    $(use $path:path;)*

    async $($entry:tt)*) => {{
        $(use $path;)*

        let ret = __entry!(async $($entry)*)($($params),*).await;
        __respond::Responder::respond_to(ret, $ser)
    }};
}

#[wasm_bindgen]
pub async fn __provider_main(args: String, jwt: Option<String>) -> String {
    console_error_panic_hook::set_once();

    let mut serializer = serde_json::Serializer::new(Vec::with_capacity(128));
    let args = serde_json::from_str(&args).unwrap(); // one error - one panic

    __main_attr! {
        for { &mut serializer } where { Ctx { data: args, deep: deep(jwt).await } }

        #{main}
    }
    .map(|_err| todo!("`Vec` (probably) will not produce `IO` errors"));

    // Safety: json is always UTF-8
    unsafe { String::from_utf8_unchecked(serializer.into_inner()) }
}
